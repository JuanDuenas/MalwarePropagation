
package co.edu.uptc.Logic;

import co.edu.uptc.Model.Device;
import java.util.ArrayList;
import org.graphstream.algorithm.Dijkstra;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author juanp
 */
public class NetworkHandling {

    public Device generateAttributes(String name, String type, boolean firewall, boolean WPA, boolean SSL) {
        int speed = (int) (Math.random() * 1000);
        Device dev = new Device(name, type, firewall, WPA, SSL, speed);
        return dev;
    }

    public double calculateWeight(String malwareType, Device a) {
        double aWeight = 0.0;

        if (malwareType.equals("fastConnection")) {
            if (!a.isSSL()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (!a.isFirewallUpdated()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (!a.isWPA3()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (a.getType().equals("Computadora")) {
                aWeight = aWeight + 2;
            }
            if (a.getType().equals("Router")) {
                aWeight++;
            }
            if (a.getConnectionSpeed() == 0) {
                aWeight = aWeight + 10;
            }
            if (a.getConnectionSpeed() > 0 && a.getConnectionSpeed() <= 10) {
                aWeight = aWeight + 4;
            } else if (a.getConnectionSpeed() > 10 && a.getConnectionSpeed() <= 100) {
                aWeight++;
            }
        }
        if (malwareType.equals("insecureConnection")) {
            if (a.isSSL()) {
                aWeight = aWeight + 5;
            }
            if (!a.isFirewallUpdated()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (a.isWPA3()) {
                aWeight = aWeight + 5;
            }
            if (a.getType().equals("Computadora")) {
                aWeight = aWeight + 2;
            }
            if (a.getType().equals("Router")) {
                aWeight++;
            }
            if (a.getConnectionSpeed() == 0) {
                aWeight = aWeight + 10;
            }
            if (a.getConnectionSpeed() > 0 && a.getConnectionSpeed() <= 10) {
                aWeight = aWeight + 6;
            } else if (a.getConnectionSpeed() > 10 && a.getConnectionSpeed() <= 100) {
                aWeight = aWeight + 3;
            } else if (a.getConnectionSpeed() < 100) {
                aWeight++;
            }
        }
        if (malwareType.equals("firewallEvasion")) {
            if (!a.isSSL()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (!a.isFirewallUpdated()) {
                aWeight = aWeight + 3;
            }
            if (!a.isWPA3()) {
                aWeight++;
            } else {
                aWeight = aWeight + 5;
            }
            if (a.getType().equals("Computadora")) {
                aWeight = aWeight + 2;
            }
            if (a.getType().equals("Router")) {
                aWeight++;
            }
            if (a.getConnectionSpeed() == 0) {
                aWeight = aWeight + 10;
            }
            if (a.getConnectionSpeed() > 0 && a.getConnectionSpeed() <= 10) {
                aWeight = aWeight + 6;
            } else if (a.getConnectionSpeed() > 10 && a.getConnectionSpeed() <= 100) {
                aWeight = aWeight + 3;
            } else if (a.getConnectionSpeed() < 100) {
                aWeight++;
            }
        }
        return aWeight;
    }

    public String algorithmDijkstra(NetworkGenerator ng, String a, String b) {
        Dijkstra dijkstra = new Dijkstra(Dijkstra.Element.EDGE, null, "weight");

        dijkstra.init(ng.getGraph());

        dijkstra.setSource(ng.getGraph().getNode(a));

        dijkstra.compute();

        double length = dijkstra.getPathLength(ng.getGraph().getNode(b));

        Path shortestPath = dijkstra.getPath(ng.getGraph().getNode(b));
        for (Edge edge : shortestPath.getEdgePath()) {
            edge.setAttribute("ui.style", "fill-color: red;");
        }

        String dijkstraInfo = "Longitud del camino mÃ¡s corto: " + length
                + "\n Nodos recorridos: \n";

        ArrayList<Node> nodeWay = new ArrayList<>(shortestPath.getNodePath());

        for (Node way : nodeWay) {
            dijkstraInfo = dijkstraInfo + way.getId() + "\n";
        }
        return dijkstraInfo;
    }

    public void clearGraph(NetworkGenerator ng) {
        for (Node node : ng.getGraph()) {
            for (Edge edge : node) {
                edge.setAttribute("ui.style", "fill-color: black;");
            }
        }

    }
}
