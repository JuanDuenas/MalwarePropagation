/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package co.edu.uptc.Presentation;

import co.edu.uptc.Logic.NetworkGenerator;
import co.edu.uptc.Model.Device;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import org.graphstream.graph.Node;

/**
 *
 * @author juanp
 */
public class JFEditGraph extends JFrame{
    
    JPanel pnlBg;
    JScrollPane scrollPane;
    JButton btnExecute;
    JPanel topPanel;
    JCheckBox cbxfirewall;
    JCheckBox cbxWPA3;
    JCheckBox cbxSSL;
    ArrayList<Node> list;
    
    public JFEditGraph(NetworkGenerator ng) {
        setSize(440,700);
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	setLocationRelativeTo(null);
	setResizable(false);
        
        list = new ArrayList<>();
        topPanel = new JPanel();
        pnlBg = new JPanel();
        
        
        for (Node node : ng.getGraph()) {
            list.add(node);
        }
        
        configFrameElements(ng);
        optionsGenerator();
        
        
        topPanel.add(btnExecute);
        add(topPanel, BorderLayout.NORTH);
	add(scrollPane, BorderLayout.CENTER);
        
	
       
        
        setVisible(true);
        
    }
      
    public void configFrameElements(NetworkGenerator ng) {
        
        pnlBg.setBackground(Color.black);
        pnlBg.setLayout(new BoxLayout(pnlBg, BoxLayout.Y_AXIS));

        scrollPane = new JScrollPane(pnlBg,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        
        btnExecute = new JButton("Ejecutar");
        btnExecute.setBounds(10,200,80,20);
        btnExecute.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                
                ng.getNetHand().algorithmDijkstra(ng);
                
                for (Node node : ng.getGraph()) {
                    Device d =(Device) node.getAttribute("Device");
                    ng.setWeight("insecureConnection");
                }
                
                
                
                ng.getNetwork().display();
            }
            
        });
        
        topPanel.setLayout(new FlowLayout());
        topPanel.setBackground(Color.darkGray);
        
        topPanel.setPreferredSize(new Dimension(topPanel.getPreferredSize().width, 60));
    }
    
    public void optionsGenerator(){
        for (Node nd : list) {
            JPanel subPanel = new JPanel(new GridLayout(1, 6)); // Cambia a GridLayout
            subPanel.setBackground(Color.white);

            JLabel label = new JLabel(" "+nd.getId());
            subPanel.add(label);

            Device d = (Device) nd.getAttribute("Device");

            JTextArea jtxtSpeed = new JTextArea();
            jtxtSpeed.setText(d.getConnectionSpeed()+"");
            jtxtSpeed.setEnabled(false);

            JCheckBox cbxfirewall = new JCheckBox("Firewall"); // Crea una nueva instancia de JCheckBox
            cbxfirewall.setSelected(d.isFirewallUpdated());
            cbxfirewall.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setFirewallUpdated(cbxfirewall.isSelected());
                }
            });
            subPanel.add(cbxfirewall);

            JCheckBox cbxSSL = new JCheckBox("SSL"); // Crea una nueva instancia de JCheckBox
            cbxSSL.setSelected(d.isSSL());
            cbxSSL.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setSSL(cbxSSL.isSelected());
                    System.out.println("PRUEBA MODIFICACIÓN "+d.getName()+"SSL: " + d.isSSL());
                }
            });
            subPanel.add(cbxSSL);

            JCheckBox cbxWPA3 = new JCheckBox("WPA3"); // Crea una nueva instancia de JCheckBox
            cbxWPA3.setSelected(d.isWPA3());
            cbxWPA3.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setWPA3(cbxWPA3.isSelected());
                }
            });
            subPanel.add(cbxWPA3);

            JLabel lblconnection = new JLabel("Conexión");    
            subPanel.add(lblconnection);

            subPanel.add(jtxtSpeed);
            pnlBg.add(subPanel);
        }
    }
}
