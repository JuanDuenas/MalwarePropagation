
package co.edu.uptc.Presentation;

import co.edu.uptc.Logic.NetworkGenerator;
import co.edu.uptc.Model.Device;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Node;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author juanp
 */
public class JFEditGraph extends JFrame {

    JPanel pnlBg;
    JScrollPane scrollPane;
    JButton btnExecute;
    JPanel topPanel;
    JCheckBox cbxfirewall;
    JCheckBox cbxWPA3;
    JCheckBox cbxSSL;
    ArrayList<Node> list;
    JComboBox<String> cbxMalware;
    JComboBox<String> cbxNodoPartida;
    JComboBox<String> cbxNodoLlegada;

    public JFEditGraph(NetworkGenerator ng) {
        setSize(440, 700);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        list = new ArrayList<>();
        topPanel = new JPanel();
        pnlBg = new JPanel();

        for (Node node : ng.getGraph()) {
            list.add(node);
        }

        configFrameElements(ng);
        optionsGenerator();

        topPanel.add(btnExecute);
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        setVisible(true);

    }

    public void configFrameElements(NetworkGenerator ng) {

        pnlBg.setBackground(Color.black);
        pnlBg.setLayout(new BoxLayout(pnlBg, BoxLayout.Y_AXIS));

        scrollPane = new JScrollPane(pnlBg, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        btnExecute = new JButton("Ejecutar");
        btnExecute.setBounds(10, 200, 80, 20);
        btnExecute.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ng.getNetHand().clearGraph(ng);

                for (Node node : ng.getGraph()) {
                    Device d = (Device) node.getAttribute("Device");
                    String selectedOption = (String) cbxMalware.getSelectedItem();

                    if (selectedOption.equals("Conexión rápida")) {
                        ng.setWeight("fastConnection");
                    }
                    if (selectedOption.equals("Evasor de Firewall")) {
                        ng.setWeight("firewallEvasion");
                    }
                    if (selectedOption.equals("Conexión Insegura")) {
                        ng.setWeight("insecureConnection");
                    }
                }
                String nodeWay = ng.getNetHand().algorithmDijkstra(ng, cbxNodoPartida.getSelectedItem().toString(), cbxNodoLlegada.getSelectedItem().toString());

                JOptionPane.showMessageDialog(null, nodeWay);

                Viewer viewer = ng.getNetwork().display();
                viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.HIDE_ONLY);
            }

        });

        topPanel.setLayout(new FlowLayout());
        topPanel.setBackground(Color.darkGray);

        topPanel.setPreferredSize(new Dimension(topPanel.getPreferredSize().width, 60));

        JLabel lblMalware = new JLabel("Tipo de Malware");
        lblMalware.setForeground(Color.white);
        String[] malwareOptions = {"Conexión rápida", "Vulnerabilidad de Firewall", "Conexión Insegura"};
        cbxMalware = new JComboBox<>(malwareOptions);

        String[] nodoOptions = {"ServA", "ServB", "ServC", "Router1", "Router2", "Router3", "Router4",
            "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10", "PC11", "PC12", "PC13",
            "PC14", "PC15", "PC16"};

        JLabel lblNodoPartida = new JLabel("Nodo de Partida");
        lblNodoPartida.setForeground(Color.white);

        cbxNodoPartida = new JComboBox<>(nodoOptions);

        topPanel.add(lblNodoPartida);
        topPanel.add(cbxNodoPartida);

        JLabel lblNodoLlegada = new JLabel("Nodo de Llegada");
        lblNodoLlegada.setForeground(Color.white);
        cbxNodoLlegada = new JComboBox<>(nodoOptions);

        topPanel.add(lblNodoLlegada);
        topPanel.add(cbxNodoLlegada);

        topPanel.add(lblMalware);
        topPanel.add(cbxMalware);
    }

    public void optionsGenerator() {
        for (Node nd : list) {
            JPanel subPanel = new JPanel(new GridLayout(1, 6));
            subPanel.setBackground(Color.white);

            JLabel label = new JLabel(" " + nd.getId());
            subPanel.add(label);

            Device d = (Device) nd.getAttribute("Device");

            JTextArea jtxtSpeed = new JTextArea();
            jtxtSpeed.setText(d.getConnectionSpeed() + "");
            jtxtSpeed.setEnabled(false);

            JCheckBox cbxfirewall = new JCheckBox("Firewall");
            cbxfirewall.setSelected(d.isFirewallUpdated());
            cbxfirewall.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setFirewallUpdated(cbxfirewall.isSelected());
                }
            });
            subPanel.add(cbxfirewall);

            JCheckBox cbxSSL = new JCheckBox("SSL");
            cbxSSL.setSelected(d.isSSL());
            cbxSSL.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setSSL(cbxSSL.isSelected());
                    System.out.println("PRUEBA MODIFICACIÓN " + d.getName() + "SSL: " + d.isSSL());
                }
            });
            subPanel.add(cbxSSL);

            JCheckBox cbxWPA3 = new JCheckBox("WPA3");
            cbxWPA3.setSelected(d.isWPA3());
            cbxWPA3.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    d.setWPA3(cbxWPA3.isSelected());
                }
            });
            subPanel.add(cbxWPA3);

            JLabel lblconnection = new JLabel("Conexión");
            subPanel.add(lblconnection);

            subPanel.add(jtxtSpeed);
            pnlBg.add(subPanel);
        }
    }
}
