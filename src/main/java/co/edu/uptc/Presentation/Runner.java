/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package co.edu.uptc.Presentation;

import co.edu.uptc.Logic.NetworkGenerator;
import co.edu.uptc.Logic.NetworkHandling;
import java.util.List;
import java.util.stream.Collectors;
import org.graphstream.algorithm.Dijkstra;
import org.graphstream.graph.*;
import org.graphstream.graph.Node;
import org.graphstream.graph.Edge;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.algorithm.generator.*;
import org.graphstream.ui.layout.springbox.implementations.LinLog;
/**
 *
 * @author juanp
 */
public class Runner {

    public static void main(String[] args) {
        
        System.setProperty("org.graphstream.ui", "swing");
        
        NetworkGenerator ng = new NetworkGenerator();
        
        LinLog linLog = new LinLog();

        // Configurar LinLog
        linLog.configure(0.0, 1.0, true, 1.0);

        // Calcular el diseño
        linLog.compute();

        // Configurar el algoritmo de diseño
        System.setProperty("org.graphstream.ui", "swing");
        ng.getNetwork().setAttribute("ui.quality");
        ng.getNetwork().setAttribute("ui.antialias");
        ng.getNetwork().setAttribute("layout.stabilization-limit", 0.1);
        ng.getNetwork().setAttribute("layout.force", 0.1);
        
        //ng.getNetHand().algorithmDijkstra(ng);
        /*
        Node nodeA = ng.getGraph().getNode("PC4");
        List<Edge> edges = nodeA.edges().collect(Collectors.toList());
        System.out.println("Adyacentes  nodo " + nodeA.getId());
        for (Edge edge : edges) {
            System.out.println(edge.getId());
        }
        */
        JFEditGraph jf = new JFEditGraph(ng);
        //ng.getNetwork().display();
    }
}
